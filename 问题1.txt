前端问题：
当访问个人主页时，前端调用/api/auth/info接口发送了用户名username=265465
后端处理过程：
首次请求正常处理：系统根据用户名265465查询用户信息，成功找到ID为18的用户
生成了Token，并返回了用户信息
但随后又出现了问题
关键问题：
从日志可以看到，当尝试使用userid=18作为参数查询用户信息时，出现错误
错误显示：UsernameNotFoundException: 查询错误，请查看邮箱是否合法
这是因为在AccountDetailsServiceImpl.loadUserByUsername方法中，当使用数字ID18作为用户名查询时，无法找到对应记录
问题原因：
JWT过滤器从Token中提取出用户ID（18）作为username
然后尝试用这个ID作为用户名去数据库查询
但在accountDetails表中，没有username或email为18的记录
用户存在ID=18，但用户名和邮箱都是别的值
代码缺陷：
在AccountDetailsServiceImpl.loadUserByUsername方法中，当查询失败时，抛出的异常信息不够明确
JWT工具类中，Token存储的是用户ID而不是用户名，但处理时未区分
解决方案建议：
修改JwtUtils.generateToken方法，确保正确存储用户标识符（区分是ID还是用户名）
修改JwtAuthenticationFilter的处理逻辑，正确解析Token中的用户信息
改进错误处理，提供更具体的错误信息
核心问题是系统在处理JWT时，混淆了用户ID和用户名的概念，导致在使用ID查询用户时失败。
以简体中文回答：
根据代码和日志分析，问题出在认证流程中的身份识别环节。具体来说：
问题原因是系统在JWT认证流程中混淆了用户ID和用户名：
初始请求时，前端发送了username=265465参数，后端成功查询到对应用户ID为18
后端生成JWT token时，将用户ID(18)作为subject存入token
后续请求时，系统从token中提取subject值(18)，并尝试作为username去查询用户
但数据库中没有username=18的用户（用户的ID是18，但用户名是265465）
因此AccountDetailsServiceImpl.loadUserByUsername抛出UsernameNotFoundException异常
这是JWT实现中常见的设计问题：token中存储了用户ID，但验证时却作为用户名使用。
解决方法：修改AccountDetailsServiceImpl.loadUserByUsername方法，使其能够区分传入的是用户ID还是用户名/邮箱，并相应地调整查询逻辑。或者，确保JWT token中存储的是用户名而非用户ID。
